pcall(function()
    local placeId = game.PlaceId
    if placeId == 2753915549 or placeId == 4442272183 or placeId == 7449423635 then
        BF = true
    end
    if _G.AutoColorLoaded then return end
    _G.AutoColorLoaded = 1
    if not _G.NeededColor then return end

    local function send_webhook()
        local plr = game.Players.LocalPlayer
        local Embed = {
            ["title"] = "<:nhech_mep:1135495034289004545> " .. plr.Name .. " <:nhech_mep:1135495034289004545> ",
            ["description"] = "Successfully taked color: " .. _G.NeededColor,
            ["type"] = "rich",
            ["color"] = tonumber(0xffff00),
            ["footer"] = {
                ["text"] = "chest farm bot",
            }
        };
        http.request {
            Url = _G.WebhookURL;
            Method = 'POST';
            Headers = {
                ['Content-Type'] = 'application/json';
            };
            Body = game:GetService'HttpService':JSONEncode({embeds = {Embed};});
        };
    end

    local function send_webhook2(clr)
        local plr = game.Players.LocalPlayer
        local Embed = {
            ["title"] = "<:nhech_mep:1135495034289004545> " .. plr.Name .. " <:nhech_mep:1135495034289004545> ",
            ["description"] = "Founded color: " .. clr,
            ["type"] = "rich",
            ["color"] = tonumber(0xffff00),
            ["footer"] = {
                ["text"] = "chest farm bot",
            }
        };
        http.request {
            Url = _G.WebhookURL;
            Method = 'POST';
            Headers = {
                ['Content-Type'] = 'application/json';
            };
            Body = game:GetService'HttpService':JSONEncode({embeds = {Embed};});
        };
    end

    local function HopServer()
        local PlaceID = game.PlaceId
        local AllIDs = {}
        local foundAnything = ""
        local actualHour = os.date("!*t").hour
        local Deleted = false
        local File = pcall(function()
        AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServersChestFarm.json"))
        end)
        if not File then
        table.insert(AllIDs, actualHour)
        writefile("NotSameServersChestFarm.json", game:GetService('HttpService'):JSONEncode(AllIDs))
        end
        function TPReturner()
            local Site;
            if foundAnything == "" then
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
            else
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
            end
            local ID = ""
            if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                foundAnything = Site.nextPageCursor
            end
            local num = 0;
            for i,v in pairs(Site.data) do
                local Possible = true
                ID = tostring(v.id)
                if tonumber(v.maxPlayers) > tonumber(v.playing) then
                    for _,Existing in pairs(AllIDs) do
                        if num ~= 0 then
                            if ID == tostring(Existing) then
                                Possible = false
                            end
                        else
                            if tonumber(actualHour) ~= tonumber(Existing) then
                                local delFile = pcall(function()
                                    -- delfile("NotSameServers.json")
                                    AllIDs = {}
                                    table.insert(AllIDs, actualHour)
                                end)
                            end
                        end
                        num = num + 1
                    end
                    if Possible == true then
                        table.insert(AllIDs, ID)
                        wait()
                        pcall(function()
                            -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                            wait()
                            game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                        end)
                        wait(4)
                    end
                end
            end
        end
    
        function Teleport()
            while wait() do
                pcall(function()
                    TPReturner()
                    if foundAnything ~= "" then
                        TPReturner()
                    end
                end)
            end
        end
    
        Teleport()
        wait(1)
    end


    pcall(function()
        repeat wait()
            if game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Main").ChooseTeam.Visible == true then
                if _G.Team == "Pirate" then
                    for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.TextButton.Activated)) do                                                                                                
                        v.Function()
                    end
                elseif _G.Team == "Marine" then
                    for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Marines.Frame.TextButton.Activated)) do                                                                                                
                        v.Function()
                    end
                else
                    for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.TextButton.Activated)) do                                                                                                
                        v.Function()
                    end
                end
            end
        until game.Players.LocalPlayer.Team ~= nil and game:IsLoaded() 
    end)

    local function getColor()
        return game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("ColorsDealer" , "1")
    end

    local function buyColor()
        return game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("ColorsDealer" , "2")
    end

    spawn(function()
        repeat wait() until game:IsLoaded()
        if not getColor() or not string.find(getColor(), _G.NeededColor) then send_webhook2(getColor()) HopServer() return end
        buyColor()
        send_webhook()
        return
    end)

end)
