status, err = pcall(function() 
repeat wait() until game:IsLoaded()
repeat wait()
    if game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Main").ChooseTeam.Visible == true then
        if _G.Team == "Pirate" then
            for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.TextButton.Activated)) do                                                                                                
                v.Function()
            end
        elseif _G.Team == "Marine" then
            for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Marines.Frame.TextButton.Activated)) do                                                                                                
                v.Function()
            end
        else
            for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.TextButton.Activated)) do                                                                                                
                v.Function()
            end
        end
    end
until game.Players.LocalPlayer.Team ~= nil and game:IsLoaded()
local placeId = game.PlaceId
if placeId ~= 7449423635 then return end
local function HopServer()
    local PlaceID = game.PlaceId
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local Deleted = false
    local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServersHop.json"))
    end)
    if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServersHop.json", game:GetService('HttpService'):JSONEncode(AllIDs))
    end
    function TPReturner()
        local Site;
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
        else
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0;
        for i,v in pairs(Site.data) do
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                for _,Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            local delFile = pcall(function()
                                -- delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end
                if Possible == true then
                    table.insert(AllIDs, ID)
                    wait()
                    pcall(function()
                        -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                        wait()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                    end)
                    wait(4)
                end
            end
        end
    end

    function Teleport()
        while wait() do
            pcall(function()
                TPReturner()
                if foundAnything ~= "" then
                    TPReturner()
                end
            end)
        end
    end

    Teleport()
    wait(1)
end
local function send_webhook()
    local OSTime = os.time()
    local Time = os.date('!*t', OSTime)
    local plr = game.Players.LocalPlayer
    local progress = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("EliteHunter", "Progress")
    local Embed = {
        ["title"] = "Chalice farm <:nhech_mep:1135495034289004545> " .. plr.Name .. " <:nhech_mep:1135495034289004545> ",
        ["description"] = "<@680188259195813923> <@286606307677569024>\n\n**ВЫПАЛА ЧАША**",
        ["type"] = "rich",
        ["color"] = tonumber(0xffff00),
        ["footer"] = {
            ["text"] = "chalice farm bot",
        },
        ["timestamp"] = string.format('%d-%d-%dT%02d:%02d:%02dZ', Time.year, Time.month, Time.day, Time.hour, Time.min, Time.sec),
    };
    http.request {
        Url = "https://discord.com/api/webhooks/1178330972333289503/8fFAkiB5yVtN_4wmyaEQYusRalJx-F1XR7bHdfPHNPrDoMr1Q0prx_H7CRDkhDTBtGp-";
        Method = 'POST';
        Headers = {
            ['Content-Type'] = 'application/json';
        };
        Body = game:GetService'HttpService':JSONEncode({embeds = {Embed};});
    };
end

loadstring(game:HttpGet("https://raw.githubusercontent.com/Minhtriettt/Free-Script/main/MTriet-Hub.lua"))()
_G.AutoElitehunter = true
_G.FastAttackDelay = 0.15

wait(5)
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("EliteHunter")
wait(5)
if game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false then 
    HopServer()
else
    _G.BossDead = false
    repeat wait(1)
        if game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false then _G.BossDead = true end
    until _G.BossDead == true
    wait(2)
    _G.NotFounded = true
    for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
        if string.find(v.Name, "halice") then _G.NotFounded = false end
    if _G.NotFounded then HopServer() else send_webhook() end
end
end)
print(err)
