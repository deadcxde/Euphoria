local function HopServer()
    local PlaceID = game.PlaceId
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local Deleted = false
    local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServersHop.json"))
    end)
    if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServersHop.json", game:GetService('HttpService'):JSONEncode(AllIDs))
    end
    function TPReturner()
        local Site;
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
        else
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        local num = 0;
        for i,v in pairs(Site.data) do
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                for _,Existing in pairs(AllIDs) do
                    if num ~= 0 then
                        if ID == tostring(Existing) then
                            Possible = false
                        end
                    else
                        if tonumber(actualHour) ~= tonumber(Existing) then
                            local delFile = pcall(function()
                                -- delfile("NotSameServers.json")
                                AllIDs = {}
                                table.insert(AllIDs, actualHour)
                            end)
                        end
                    end
                    num = num + 1
                end
                if Possible == true then
                    table.insert(AllIDs, ID)
                    wait()
                    pcall(function()
                        -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                        wait()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                    end)
                    wait(4)
                end
            end
        end
    end

    function Teleport()
        while wait() do
            pcall(function()
                TPReturner()
                if foundAnything ~= "" then
                    TPReturner()
                end
            end)
        end
    end

    Teleport()
    wait(1)
end

local function getFruitWorth(fruitName)
    worth = {
        ["Quake Fruit"] = 1000000,
        ["Buddha Fruit"] = 1200000,
        ["Love Fruit"] = 1300000,
        ["Spider Fruit"] = 1500000,
        ["Sound Fruit"] = 1700000,
        ["Phoenix Fruit"] = 1800000,
        ["Portal Fruit"] = 1900000,
        ["Rumble Fruit"] = 2100000,
        ["Pain Fruit"] = 2300000,
        ["Blizzard Fruit"] = 2400000,
        ["Gravity Fruit"] = 2500000,
        ["Mammoth Fruit"] = 2700000,
        ["Dough Fruit"] = 2800000,
        ["Shadow Fruit"] = 2900000,
        ["Venom Fruit"] = 3000000,
        ["Control Fruit"] = 3200000,
        ["Spirit Fruit"] = 3400000,
        ["Dragon Fruit"] = 3500000,
        ["Leopard Fruit"] = 5000000,
    }
    return worth[fruitName] or 0
end

local function isFruitsOnServer() 
    for i,v in pairs(game.Workspace:GetChildren()) do
        if v.Name == 'Blox Fruit Dealer' then
            print("Dealer")
        else
            if string.find(v.Name, 'Fruit') then
                return true
            end
        end
    end
    return false
end

local function takeFruits()
    for i,v in pairs(game.Workspace:GetChildren()) do
        if v.Name == 'Blox Fruit Dealer' then
            print("Dealer")
        else
            if string.find(v.Name, 'Fruit') then
                wait(2)
                print(v.Name)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Fruit.Fruit.CFrame
                wait(.1)
                game:service('VirtualInputManager'):SendKeyEvent(true, "W", false, game)
                game:service('VirtualInputManager'):SendKeyEvent(false, "W", false, game)
                game:service('VirtualInputManager'):SendKeyEvent(true, "A", false, game)
                game:service('VirtualInputManager'):SendKeyEvent(false, "A", false, game)
                wait(.5)
                game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
            end
        end
    end
end

local function storeFruit(fruitName, fruitRealName) 
    local args = {
        [1] = "StoreFruit",
        [2] = fruitRealName,
        [3] = game:GetService("Players").LocalPlayer.Character:FindFirstChild(fruitName)
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
end

local function checkFruit(fruitName)
    game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild(fruitName)) 
    wait(1)
    pcall(function() UnEquip() end)
end

local function checkAllFruits()
    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do 
        if string.find(v.Name, ' Fruit') then
            print("Checking", v.Name)
            pcall(function() checkFruit(v.Name) end)
            wait(.6)
        end
    end
end

local function storeAllFruits()
    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do 
        if string.find(v.Name, ' Fruit') then
            print("Storing", v.Name)
            pcall(function() storeFruit(v.Name, v:GetAttribute("OriginalName")) end)
            wait(.75)
        end
    end
end

local function isWorthFruitInInventory()
    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do 
        if string.find(v.Name, ' Fruit') then
            if getFruitWorth(v.Name) >= 1000000 then return true end
        end
    end
    return false
end


local function isFruitsInInventory()
    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do 
        if string.find(v.Name, ' Fruit') then
            return true
        end
    end
    return false
end

local function UnEquip()
    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.ToolTip == 'Melee' then 
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v) 
            wait(1)
            game.Players.LocalPlayer.Character:FindFirstChild(v).Parent = game.Players.LocalPlayer.Backpack
            return
        end
    end
end


repeat wait() until game:IsLoaded()
repeat takeFruits() until isFruitsOnServer() == false
pcall(function() UnEquip() end)
wait(1)
if isFruitsInInventory() then
    checkAllFruits()
    wait(1)
    pcall(function() UnEquip() end)
    wait(1)
    storeAllFruits()
end
repeat wait() until isWorthFruitInInventory() == false
HopServer()
